import { Button, HorizontalBox, VerticalBox } from "std-widgets.slint";
import { TitleText, RegularText, MultiChoice, TextButton, ScrollChoice } from "widgets.slint";
import { CatInfo, MainPlayUpdate, Screen, FullInfo, ChoicePlayUpdate, PlaySelectParams, ScoreStatSlint } from "structs.slint";
import { SelectLookUpScreen, LookUpScreen } from "screen-look-up.slint";
import { SelectMainPlayScreen } from "screen-select-main-play.slint";
import { MainPlayScreen } from "screen-main-play.slint";
import { SelectChoicePlayScreen } from "screen-select-choice-play.slint";
import { ChoicePlayScreen } from "screen-choice-play.slint";
import { SelectPlayScreen } from "screen-select-play.slint";
import { ScoreScreen } from "screen-score.slint";
import { TextStyle, FontSettings, Palette, Sizes } from "styling.slint";

export component AppWindow inherits Window {
    title: "Geo quiz";
    icon: @image-url("icon.svg");
    // width: 500px;
    // ***************************************************************** //
    //                            PROPERTIES
    // ***************************************************************** //
    in-out property <Screen> screen: Screen.Start;
    // for select look up 
    in property <[string]> search_all_countries : ["Jamaica"]; 
    in property <[bool]> search_countries_mask: [true];
    in property <[string]> all_categories_name: ["Flag", "Outline", "Country", "Capital", "Languages", "Borders", "Region", "Currencies"];
    in property <[string]> txt_categories_name: ["Country", "Capital", "Languages", "Borders", "Region", "Currencies"];
    in property <[string]> sub_categories_name: ["World", "Africa", "Americas", "Asia", "Europe", "Oceania"];
    
    // ***************************************************************** //
    //                            CALLBACKS
    // ***************************************************************** //
    callback look_up_search_changed(search: string);
    callback look_up_selected(num: int);
    callback set_play_config(params:PlaySelectParams);
    callback close();
    callback reset_score();
    callback save_score();
    callback prep_look_up();
    // main 
    callback next(int);
    callback prev();
    callback start_play([int], int);
    // choice
    callback choice_start_play(int, int);
    callback choice_changed([bool], bool, bool);
    // score
    callback score_filter_changed(bool);
    callback score_sub_cat_changed(int);


    // ***************************************************************** //
    //                            UI LOGIC
    // ***************************************************************** //

    public function back() {
        if root.screen == Screen.MainPlay {
            root.screen = Screen.SelectMainPlay;
        } else if root.screen == Screen.SelectMainPlay {
            root.screen = Screen.SelectPlay
        } else if root.screen == Screen.LookUp {
            root.screen = Screen.SelectLookUp;
        } else if root.screen == Screen.ChoicePlay {
            root.screen = Screen.SelectChoicePlay;
        } else if root.screen == Screen.SelectChoicePlay {
            root.screen = Screen.SelectPlay
        } else { // Score, SelectLookUp, SelectPlay
            root.screen = Screen.Start
        }
    }

    public function update_look_up_selected(infos: FullInfo) {
        w_look_up.infos = infos;
        w_look_up.reset();
        root.focus();
        root.screen = Screen.LookUp
    }

    public function update_screen(info: MainPlayUpdate, cat: [CatInfo]) {
        main_play_s.update_screen(info, cat);
    }

    public function update_choice(info : ChoicePlayUpdate) {
        choice_play_s.update_screen(info);
    }

    public function update_score(stat: ScoreStatSlint) {
        w_score.stat = stat;
    }

    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {
            if event.text == Key.Escape && !event.repeat {
                root.close();
            } 
            if event.text == "b" {
                back();
            }
            if root.screen == Screen.MainPlay {
                if event.text == Key.LeftArrow {
                    root.prev();
                } else if event.text == Key.RightArrow {
                    next(0);
                }
            }
            if root.screen == Screen.ChoicePlay {
                if event.text == Key.LeftArrow {
                    choice_play_s.collect_changed(false, false);
                } else if event.text == Key.RightArrow {
                    choice_play_s.collect_changed(true, false);
                }
            }
            accept
        }
    }
    // ***************************************************************** //
    //                            BACK BUTTON
    // ***************************************************************** //
    TouchArea {
        visible: root.screen != Screen.Start;
        x: Sizes.padding;
        y: Sizes.padding;
        width: Sizes.title_height;
        height: Sizes.title_height;
        Image {
            source: @image-url("back.svg");
            height: Sizes.title_height;
        }

        clicked => {
            back();
        }
    }
    // ***************************************************************** //
    //                            Start Screen
    // ***************************************************************** //
    Rectangle {
        visible: root.screen == Screen.Start;
        VerticalLayout {
            padding: Sizes.padding;
            spacing: Sizes.spacing;
            // padding-left : root.width/10;
            TitleText {
                text: "Geo Quiz";
            }
            Rectangle {}
            TextButton {
                height: root.height/10;
                width_button: root.width/2;
                text: "Play";
                clicked => {
                    root.screen = Screen.SelectPlay;
                }
            }
            TextButton {
                width_button: root.width/2;
                height: root.height/10;
                text: "Look Up Infos";
                clicked => {root.screen = Screen.SelectLookUp}
            }
            TextButton {
                width_button: root.width/2;
                height: root.height/10;
                text: "Score";
                clicked => {
                    score_filter_changed(false);
                    score_sub_cat_changed(0);
                    root.screen = Screen.Score;
                }
            }
            Rectangle {}
            Rectangle {}
        }
        
    }
    // ***************************************************************** //
    //                            OTHER SCREENS
    // ***************************************************************** //

    w_score := ScoreScreen {
        visible: root.screen == Screen.Score;
        sub_categories_name: root.sub_categories_name;
        filter_changed(all) => {score_filter_changed(all)}
        category_changed(idx) => {score_sub_cat_changed(idx)}
    }

    w_select_play := SelectPlayScreen {
        visible: root.screen == Screen.SelectPlay;
        sub_categories_name: root.sub_categories_name;
        set_play_config(params) => {
            if params.play_type {
                root.screen = Screen.SelectMainPlay
            } else {
                root.screen = Screen.SelectChoicePlay
            }
            set_play_config(params);
        }
    }
    w_sel_look_up := SelectLookUpScreen {
        visible: root.screen == Screen.SelectLookUp;
        all: root.search_all_countries;
        on: root.search_countries_mask;
        search_changed(search) => {
            look_up_search_changed(search)
        }
        selected(num) => {
            look_up_selected(num) 
        }
    }

    w_look_up := LookUpScreen {
        visible: root.screen == Screen.LookUp;
    }
    
    sel_main_play_s := SelectMainPlayScreen {
        info_type_names: root.all_categories_name;
        guess_type_names: root.txt_categories_name;
        visible: root.screen == Screen.SelectMainPlay;
        play(cat_choices, im_choice, play_mode) => {
            main_play_s.play_mode = 3 -  play_mode;
            start_play(
                cat_choices, 
                im_choice,
            );
            root.screen = Screen.MainPlay;
        }
    }

    main_play_s := MainPlayScreen {
        visible: root.screen == Screen.MainPlay;
        next(score) => {next(score)}
        prev() => {prev()}
    }

    sel_choice_play_s := SelectChoicePlayScreen {
        visible: root.screen == Screen.SelectChoicePlay;
        info_types: root.all_categories_name;
        play(info_type, guess_type) => {
            choice_start_play(
                info_type, 
                guess_type
            );
            root.screen = Screen.ChoicePlay;
        }
        
    }
    choice_play_s := ChoicePlayScreen {
        visible: root.screen == Screen.ChoicePlay;
        changed(was_guessed, next, found) => {choice_changed(was_guessed, next, found)}
    }
}
