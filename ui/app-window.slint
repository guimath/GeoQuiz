import { Button, VerticalBox, HorizontalBox, TextEdit, CheckBox, ComboBox} from "std-widgets.slint";

// ***************************************************************** //
//                            External Elements
// ***************************************************************** //
export struct CatInfo {
  category: string,
  full: string,
  first: string,
  with_hint: bool,
}

export struct FullUpdate  {
  num: int,
  out_of: int,
  score: int,
  flag: image,
  seen: bool, 
}


// ***************************************************************** //
//                            Default Widgets
// ***************************************************************** //
component MainText inherits Text {
  // font-family: 
  font-size: 25pt;
  // color: white;
}

component CatChoose inherits HorizontalBox {
    in property <string> text;
    in property <[string]> model;
    in property <int> index;
    in-out property <string> selected;
    VerticalBox {
        alignment: center;
        padding: 0;
        Text {
            text: root.text;
            width: 80pt;
        }
    }

    VerticalBox {
        alignment: center;
        height: 25pt;
        padding: 0;
        num := ComboBox {
            width: 50%;
            height: 25pt;
            model: root.model;
            current_index: root.index;
            selected(current-value) => {
                root.selected = current-value;
            }
        }
    }
}

component ToggleStar inherits TouchArea {
    in property <bool> on;
    property <image> off_img: @image-url("star_off.svg");
    property <image> on_img: @image-url("star_on.svg");
    height: 75px;
    width: 75px;
    im := Image {
        height: 75px;
        width: 75px;
        source: root.off_img;
    }

    public function set_status(on: bool) {
        if on {
            im.source = root.on_img;
        } else {
            im.source = root.off_img;
        }
    }
}

component ThreeStartScore {
    in property <int> score;
    callback score_changed(score: int);
    VerticalBox {
        padding: 0;
        HorizontalBox {
            padding: 0;

            star1 := ToggleStar {
                clicked => {
                    internal_score_change(1)
                }
            }

            star2 := ToggleStar {
                clicked => {
                    internal_score_change(2)
                }
            }

            star3 := ToggleStar {
                clicked => {
                    internal_score_change(3)
                }
            }
        }
    }

    function internal_score_change(score: int) {
        set_score(score);
        score_changed(score);
    }
    public function set_score(score: int) {
        star1.set_status(score > 0);
        star2.set_status(score > 1);
        star3.set_status(score > 2);
    }
}

component HiddenText inherits TouchArea {
    in-out property <string> name;
    in-out property <string> first_letter;
    in-out property <string> type;
    in property <bool> show;
    in-out property <bool> show_first_letter;
    in-out property <length> size_hint: 0pt;
    in property <bool> initials_on;
    in property <bool> learn_mode;
    callback hint();

    public function update_cat(cat: CatInfo) {
        self.type = cat.category;
        self.name = cat.full;
        self.first_letter = cat.first;
        if root.initials_on {
            self.show_first_letter = true;
            self.size_hint = 0pt;
        } else if root.learn_mode || !cat.with_hint {
            self.size_hint = 0pt;
        } else {
            self.show_first_letter = false;
            self.size_hint = 40pt;
        }
    }
    Rectangle {
        background: grey;
        border-radius: 10px;
        width: 90%;
        HorizontalBox {
      // vertical-stretch: center;
      VerticalBox {
                alignment: center;
                MainText {
                    width: 150pt;
                    horizontal-alignment: right;
                    text: root.type;
                }
            }

            Rectangle {
                padding: 0;
                VerticalBox {
                    alignment: center;
                    height: 70pt;
                    MainText {
                        horizontal-alignment: left;
                        text: root.first_letter;
                        visible: root.show_first_letter && !root.show;
                    }
                }

                VerticalBox {
                    alignment: center;
                    height: 70pt;
                    MainText {
                        horizontal-alignment: left;
                        text: root.name;
                        visible: root.show;
                        wrap: word-wrap;
                    }
                }
            }

            Rectangle { } // spacing
      VerticalBox {
                alignment: center;
                padding: 0;
                height: 70pt;
                TouchArea {
                    height: root.size_hint;
                    width: root.size_hint;
                    clicked => {
                        hint();
                        root.size_hint = 0;
                        root.show_first_letter = true
                    }
                    animate height, width {
                        duration: 300ms;
                        easing: ease-in-out;
                    }
                    Image {
                        source: @image-url("hint.svg");
                        height: root.size_hint;
                        width: root.size_hint;
                        animate height, width {
                            duration: 300ms;
                            easing: ease-in-out;
                        }
                    }
                }
            }
        }
    }
}

export component AppWindow inherits Window {
    title: "Geo quiz";
  // ***************************************************************** //
  //                            PROPERTIES
  // ***************************************************************** //
  in property <image> flag: @image-url("../data/flags/jam.svg");
    in property <string> other_info: "Jamaican dollar (JMD, $)";
    in-out property <int> info_level:0;
    in-out property <bool> initials_on: false;
    in-out property <bool> learn_mode: false;
    in-out property <bool> hard_mode: false;
    in-out property <bool> easy_first: false;
    in-out property <bool> playing: false;
    in property <[string]> info_types: ["Country", "Capital", "Languages", "Borders", "Region", "Currencies"];
    //, "LatLon"
  property <int> num: 0;
    property <int> out_of: 110;
    property <int> score_delayed: 0;
  // ***************************************************************** //
  //                            CALLBACKS
  // ***************************************************************** //
  callback close();
    callback next(int);
    callback prev();
    callback start_play([string], bool, bool, string);

  // ***************************************************************** //
  //                            UI LOGIC
  // ***************************************************************** //
  function prep_start_play() {
        root.start_play([cat1.selected, cat2.selected, cat3.selected], root.easy_first, root.hard_mode, cat_im.selected);
        root.playing = true;
    }
    public function update_screen(info: FullUpdate, cat: [CatInfo]) {
        w_score.set_score(info.score);
        w_cat1.update_cat(cat[0]);
        w_cat2.update_cat(cat[1]);
        w_cat3.update_cat(cat[2]);
        if root.learn_mode || info.seen {
            root.info_level = 3
        } else {
            root.info_level = 0
        }
        root.num = info.num;
        root.out_of = info.out_of;
        flag.source = info.flag;
    }

    function prep_next(score: int) {
        if score == 0 {
            root.next(score);
        } else {
            w_score.set_score(score);
            root.score_delayed = score;
            root.info_level = 3;
            timer.running = true;
        }
    }

    timer := Timer {
        interval: 200ms;
        running: false;
        triggered() => {
            self.running = false;
            root.next(root.score_delayed);
        }
    }

    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {
            if !root.playing {
                if event.text == Key.Space {
                    prep_start_play()
                }
                return accept;
            }
            if event.text == Key.Escape && !event.repeat {
                root.close();
            } else if event.text == Key.LeftArrow {
                root.prev();
            } else if event.text == Key.RightArrow {
                prep_next(0);
            }
            if (event.text == "&" || event.text == "1") && !event.repeat {
                prep_next(1);
            }
            if (event.text == "Ã©" || event.text == "2") && !event.repeat {
                prep_next(2);
            }
            if ((event.text == "\"" && "\"" != "o") || event.text == "3") && !event.repeat {
                ;
                prep_next(3);
            }
            if event.text == Key.Space && !event.repeat {
                root.info_level += 1;
            }
            if event.text == Key.Space && event.modifiers.control {
                root.info_level = 3;
            }
            if event.text == "b" {
                root.playing = false;
            }
        // else if event.text == "d" && event.modifiers.alt {
       
      accept
        }
    }

  // ***************************************************************** //
  //                            WIDGETS
  // ***************************************************************** //
  // init screen
  Rectangle {
        visible: !root.playing;
        padding: 0;
        VerticalBox {
            HorizontalBox {
                alignment: center;
                padding: 40pt;
                Button {
                    height: 70pt;
                    width: 100pt;
                    text: "Play";
                    clicked => {
                        prep_start_play()
                    }
                }
            }

            HorizontalBox {
                alignment: center;
                padding: 0pt;
                VerticalBox {
                    padding: 0pt;
                    CheckBox {
                        text: "Show hints by default";
                        checked: root.initials_on;
                        enabled: !root.learn_mode;
                        toggled => {
                            root.initials_on = self.checked
                        }
                    }
                    /// TODO move to mode : but need cool ui element
                    /// 1) No hints available 
                    /// 2) Hints available on click
                    /// 3) Hints always shown
                    /// 4) All info shown  

                    CheckBox {
                        text: "Learning mode (show all by default)";
                        checked: root.learn_mode;
                        toggled => {
                            root.learn_mode = self.checked
                        }
                    }

                    CheckBox {
                        text: "Include territories that are not independent)";
                        checked: root.hard_mode;
                        toggled => {
                            root.hard_mode = self.checked
                        }
                    }

                    CheckBox {
                        text: "Start with more known flag (according to own score)";
                        checked: root.easy_first;
                        toggled => {
                            root.easy_first = self.checked
                        }
                    }
                }
            }

            HorizontalBox {
                alignment: center;
                padding: 0pt;
                VerticalBox {
                    padding: 0pt;
                    cat_im := CatChoose {
                        text: "Image:";
                        model: ["Flags", "Outlines"];
                        selected: "Flags";
                        index: 0;
                    }

                    cat1 := CatChoose {
                        text: "Category 1:";
                        model: root.info_types;
                        selected: root.info_types[0];
                        index: 0;
                    }

                    cat2 := CatChoose {
                        text: "Category 2:";
                        model: root.info_types;
                        selected: root.info_types[1];
                        index: 1;
                    }

                    cat3 := CatChoose {
                        text: "Category 3:";
                        model: root.info_types;
                        selected: root.info_types[2];
                        index: 2;
                    }
                }
            }

            Rectangle { }
        }
    }
  // Playing screen
  Rectangle {
        visible: root.playing;
        padding: 0;
        VerticalBox {
            height: 100%;
            Rectangle {
                height: 20px;
            }

            HorizontalBox {
                padding: 0;
                VerticalBox {
                    MainText {
                        text: "\{root.num + 1} / \{root.out_of}";
                    }
                }
      // VerticalBox {
      // }
      w_score := ThreeStartScore {
                    score_changed(score) => {
                        prep_next(score)
                    }
                }
            }

            Rectangle {
                height: 20px;
            }

            flag := Image {
                height: 33%;
                source: root.flag;
      // rotation-angle:root.photo_rotation*1deg ;  // doesn't rescale so meh
    }

            w_cat1 := HiddenText {
                initials_on: root.initials_on;
                learn_mode: root.learn_mode;
                type: "Country: ";
                name: "Jamaica";
                first_letter: "J";
                show: root.info_level >= 1;
                clicked => {
                    if root.info_level < 1 {
                        root.info_level = 1;
                        self.size_hint = 0;
                    }
                }
            }

            w_cat2 := HiddenText {
                initials_on: root.initials_on;
                learn_mode: root.learn_mode;
                type: "Capital: ";
                name: "Kingston";
                first_letter: "K";
                show: root.info_level >= 2;
                clicked => {
                    if root.info_level < 2 {
                        root.info_level = 2;
                        self.size_hint = 0;
                        w_cat1.size_hint = 0;
                    }
                }
            }

            w_cat3 := HiddenText {
                initials_on: root.initials_on;
                learn_mode: root.learn_mode;
                type: "Language: ";
                name: "English, Jamaican Patois";
                first_letter: "E..., J...";
                show: root.info_level > 2;
                clicked => {
                    if root.info_level < 3 {
                        root.info_level = 3;
                        self.size_hint = 0;
                        w_cat1.size_hint = 0;
                        w_cat2.size_hint = 0;
                    }
                }
            }

            Rectangle { }
        }
    }
}
