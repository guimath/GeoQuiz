import { Button, VerticalBox, HorizontalBox, TextEdit, CheckBox, ComboBox} from "std-widgets.slint";
import {MultiChoice, ThreeStartScore, MainText, HiddenText} from "widgets.slint";
import {CatInfo, FullUpdate} from "structs.slint";

export component AppWindow inherits Window {
    title: "Geo quiz";
    // ***************************************************************** //
    //                            PROPERTIES
    // ***************************************************************** //
    in property <image> flag: @image-url("../data/flags/jam.svg");
    in property <string> other_info: "Jamaican dollar (JMD, $)";
    in-out property <int> info_level:0;
    in-out property <int> play_mode: 1;
    in-out property <bool> playing: false;
    in property <[string]> info_types: ["Country", "Capital", "Languages", "Borders", "Region", "Currencies"];
    //, "LatLon"
    property <int> num: 0;
    property <int> out_of: 110;
    property <int> score_delayed: 0;
    // ***************************************************************** //
    //                            CALLBACKS
    // ***************************************************************** //
    callback close();
    callback next(int);
    callback prev();
    callback start_play([int], bool, bool, int);

    // ***************************************************************** //
    //                            UI LOGIC
    // ***************************************************************** //
    function prep_start_play() {
        root.play_mode = w_play_mode.choice_num;
        root.start_play(
            [cat1.choice_num, cat2.choice_num, cat3.choice_num], 
            w_order.not_default, 
            w_hard.not_default, 
            cat_im.choice_num);
        root.playing = true;
    }

    public function update_screen(info: FullUpdate, cat: [CatInfo]) {
        w_score.set_score(info.score);
        w_cat1.update_cat(cat[0]);
        w_cat2.update_cat(cat[1]);
        w_cat3.update_cat(cat[2]);
        if root.play_mode == 3 || info.seen {
            root.info_level = 3
        } else {
            root.info_level = 0
        }
        root.num = info.num;
        root.out_of = info.out_of;
        flag.source = info.flag;
    }

    function prep_next(score: int) {
        if score == 0 {
            root.next(score);
        } else {
            w_score.set_score(score);
            root.score_delayed = score;
            root.info_level = 3;
            timer.running = true;
        }
    }

    timer := Timer {
        interval: 200ms;
        running: false;
        triggered() => {
            self.running = false;
            root.next(root.score_delayed);
        }
    }

    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {
            if !root.playing {
                if event.text == Key.Space {
                    prep_start_play()
                }
                return accept;
            }
            if event.text == Key.Escape && !event.repeat {
                root.close();
            } else if event.text == Key.LeftArrow {
                root.prev();
            } else if event.text == Key.RightArrow {
                prep_next(0);
            }
            if (event.text == "&" || event.text == "1") && !event.repeat {
                prep_next(1);
            }
            if (event.text == "Ã©" || event.text == "2") && !event.repeat {
                prep_next(2);
            }
            if ((event.text == "\"" && "\"" != "o") || event.text == "3") && !event.repeat {
                ;
                prep_next(3);
            }
            if event.text == Key.Space && !event.repeat {
                root.info_level += 1;
            }
            if event.text == Key.Space && event.modifiers.control {
                root.info_level = 3;
            }
            if event.text == "b" {
                root.playing = false;
            }
        accept
        }
    }

    // ***************************************************************** //
    //                            INIT SCREEN
    // ***************************************************************** //
    Rectangle {
        visible: !root.playing;
        padding: 0;
        VerticalBox {
            HorizontalBox {
                alignment: center;
                padding: 40pt;
                Button {
                    height: 70pt;
                    width: 100pt;
                    text: "Play";
                    clicked => {
                        prep_start_play()
                    }
                }
            }

            Rectangle {
                background: #4a4458ff;
                border-radius: 10px;
                VerticalBox {
                    padding: 10px;
                    Text {
                        text: "Play mode";
                        horizontal-alignment: center;
                    }

                    w_play_mode := MultiChoice {
                        choices: ["No hints", "Clickable hints", "Always on hints", "Full info on"];
                        choices_len: 4;
                        choice_num: 1;
                        spacing: 10pt;
                    }
                }
            }

            Rectangle {
                background: #4a4458ff;
                border-radius: 10px;
                HorizontalBox {
                    padding: 10px;
                    Text {
                        text: "Country list includes:";
                        vertical-alignment: center;
                        horizontal-alignment: right;
                        wrap: word-wrap;
                    }

                    w_hard := MultiChoice {
                        width: 70%;
                        choices: ["Independent countries only", "All territories"];
                        choices_len: 2;
                        width_per_elem: 40%;
                        spacing: 20pt;
                    }
                }
            }

            Rectangle {
                width: 60%;
                background: #4a4458ff;
                border-radius: 10px;
                HorizontalBox {
                    padding: 10px;
                    Text {
                        text: "Start with:";
                        horizontal-alignment: right;
                        vertical-alignment: center;
                        wrap: word-wrap;
                    }

                    w_order := MultiChoice {
                        width: 70%;
                        choices: ["Less known countries", "More known countries"];
                        choices_len: 2;
                        width_per_elem: 40%;
                        spacing: 20pt;
                    }
                }
            }

            Rectangle {
                width: 100%;
                height: 2px;
                background: white;
            }

            Text {
                text: "Infos";
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: 16pt;
            }

            HorizontalBox {
                alignment: center;
                padding: 0pt;
                VerticalBox {
                    padding: 0pt;
                    cat_im := MultiChoice {
                        width: 100%;
                        choices: ["Flags", "Outlines"];
                        choices_len: 2;
                        width_per_elem: 30%;
                        background_elem: #00000000;
                        spacing: 10pt;
                    }

                    cat1 := MultiChoice {
                        width: 100%;
                        choices: root.info_types;
                        choices_len: 6;
                        width_per_elem: 15%;
                        background_elem: #00000000;
                        spacing: 5pt;
                    }

                    cat2 := MultiChoice {
                        width: 100%;
                        choices: root.info_types;
                        choices_len: 6;
                        width_per_elem: 15%;
                        background_elem: #00000000;
                        choice_num: 1;
                        spacing: 5pt;
                    }

                    cat3 := MultiChoice {
                        width: 100%;
                        choices: root.info_types;
                        choices_len: 6;
                        width_per_elem: 15%;
                        background_elem: #00000000;
                        choice_num: 2;
                        spacing: 5pt;
                    }
                }
            }

            Rectangle { }
        }
    }


    // ***************************************************************** //
    //                            PLAYING SCREEN
    // ***************************************************************** //
    Rectangle {
        visible: root.playing;
        padding: 0;
        VerticalBox {
            height: 100%;
            Rectangle {
                height: 20px;
            }

            HorizontalBox {
                padding: 0;
                VerticalBox {
                    MainText {
                        text: "\{root.num + 1} / \{root.out_of}";
                    }
                }
                w_score := ThreeStartScore {
                    score_changed(score) => {
                        prep_next(score)
                    }
                }
            }

            Rectangle {
                height: 20px;
            }

            flag := Image {
                height: 33%;
                source: root.flag;
            }

            w_cat1 := HiddenText {
                play_mode: root.play_mode;
                type: "Country: ";
                name: "Jamaica";
                first_letter: "J";
                show: root.info_level >= 1;
                clicked => {
                    if root.info_level < 1 {
                        root.info_level = 1;
                        self.size_hint = 0;
                    }
                }
            }

            w_cat2 := HiddenText {
                play_mode: root.play_mode;
                type: "Capital: ";
                name: "Kingston";
                first_letter: "K";
                show: root.info_level >= 2;
                clicked => {
                    if root.info_level < 2 {
                        root.info_level = 2;
                        self.size_hint = 0;
                        w_cat1.size_hint = 0;
                    }
                }
            }

            w_cat3 := HiddenText {
                play_mode: root.play_mode;
                type: "Language: ";
                name: "English, Jamaican Patois";
                first_letter: "E..., J...";
                show: root.info_level > 2;
                clicked => {
                    if root.info_level < 3 {
                        root.info_level = 3;
                        self.size_hint = 0;
                        w_cat1.size_hint = 0;
                        w_cat2.size_hint = 0;
                    }
                }
            }
            Rectangle { } // spacing
        }
    }
}
