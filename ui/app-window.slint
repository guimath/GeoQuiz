import { Button, HorizontalBox, VerticalBox } from "std-widgets.slint";
import { RegularText, BarGraph, HyperLinkClick, TextButtonWithIcon } from "widgets.slint";
import { CatInfo, MainPlayUpdate, Screen, FullInfo, ChoicePlayUpdate, PlaySelectParams, ScoreStatSlint } from "structs.slint";
import { SelectLookUpScreen, LookUpScreen } from "screen-look-up.slint";
import { SelectMainPlayScreen } from "screen-select-main-play.slint";
import { MainPlayScreen } from "screen-main-play.slint";
import { SelectChoicePlayScreen } from "screen-select-choice-play.slint";
import { ChoicePlayScreen } from "screen-choice-play.slint";
import { SelectPlayScreen } from "screen-select-play.slint";
import { ScoreScreen } from "screen-score.slint";
import { TextStyle, FontSettings, Palette, Sizes } from "styling.slint";
import { HelpScreen } from "screen-help.slint";
export { HyperLinkClick }



export component AppWindow inherits Window {
    title: "Geo quiz";
    icon: @image-url("img/icon.png");
    // width: 500px;
    // ***************************************************************** //
    //                            PROPERTIES
    // ***************************************************************** //
    in-out property <Screen> screen: Screen.Start;
    in-out property <Screen> previous_screen: Screen.Start;
    in property <[string]> search_all_countries : ["Jamaica"]; 
    in property <[bool]> search_countries_mask: [true];
    in property <[string]> all_categories_name: ["Flag",  "Map", "Outline", "Country", "Capital", "Borders", "Area", "Population", "Languages", "Currency", "Region",];
    in property <[string]> txt_categories_name: ["Country", "Capital", "Borders", "Area", "Population", "Languages", "Currency", "Region",];
    in property <[string]> sub_categories_name: ["World", "Africa", "Americas", "Asia", "Europe", "Oceania"];
    in property <[string]> users: ["User 0"];
    property <int> last_num;
    property <int> play_score_max : 5;
    property <[int]> play_score_val : [1, 2, 5, 1, 5, 2];
    // ***************************************************************** //
    //                            CALLBACKS
    // ***************************************************************** //
    callback look_up_search_changed(search: string);
    callback look_up_selected(num: int);
    callback look_up_current();
    callback set_play_config(params:PlaySelectParams);
    callback close();
    callback save_score();
    callback prep_look_up();
    // main 
    callback next(int);
    callback prev();
    callback start_play([int], int);
    // choice
    callback choice_start_play(int, int);
    callback choice_changed([bool], bool, bool);
    callback get_play_scores(choice_play: bool);
    // score
    callback score_user_selected(name:string);
    callback score_filter_changed(bool);
    callback score_sub_cat_changed(int);
    callback score_user_change(name:string, delete:bool);
    callback score_rename_user(name1:string, name2:string);
    // ***************************************************************** //
    //                            UI LOGIC
    // ***************************************************************** //

    public function back() {
        if root.screen == Screen.MainPlay {
            root.screen = Screen.SelectMainPlay;
        } else if root.screen == Screen.SelectMainPlay {
            sel_main_play_s.custom = false;
            root.screen = Screen.SelectPlay
        } else if root.screen == Screen.LookUp {
            if root.previous_screen == Screen.Start {
                root.screen = Screen.SelectLookUp;
            } else {
                root.screen = root.previous_screen;
                root.previous_screen = Screen.Start;
            }
        } else if root.screen == Screen.ChoicePlay {
            root.screen = Screen.SelectChoicePlay;
        } else if root.screen == Screen.SelectChoicePlay {
            sel_choice_play_s.custom = false;
            root.screen = Screen.SelectPlay
        } else { // Score, SelectLookUp, SelectPlay, Help
            root.screen = Screen.Start;
            root.focus();
        }
    }

    public function update_look_up_current(infos: FullInfo) {
        root.previous_screen = root.screen;
        update_look_up_selected(infos)
    }
    public function update_look_up_selected(infos: FullInfo) {
        w_look_up.infos = infos;
        w_look_up.reset();
        root.focus();
        root.screen = Screen.LookUp
    }

    public function update_screen(info: MainPlayUpdate, cat: [CatInfo]) {
        main_play_s.update_screen(info, cat);
    }

    public function update_choice(info : ChoicePlayUpdate) {
        choice_play_s.update_screen(info);
    }

    public function update_score(stat: ScoreStatSlint) {
        w_score.stat = stat;
    }

    public function set_active_user(name: string) {
        w_score.set_active_user(name);
        w_look_up.user = name;
    }
    public function set_active_user_look_up(name: string) {
        w_look_up.user = name;
    }

    public function show_play_scores(val:[int], max:int) {
        root.play_score_max = max;
        root.play_score_val = val;
        play_scores_popup.show();
    }
    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {
            if event.text == Key.Home { 
                // Home made binding to catch back button on android otherwise always closes app
                // modification file: slint/internal/backends/android-activity/androidwindowadapter.rs:542
                // Keycode::Back => Some(Key::Home.into()),
                if root.screen == Screen.Start {
                    close();
                } else {
                    back();
                    return accept;
                }
            }
            if event.text == Key.Escape && !event.repeat {
                root.close();
            } 
            if event.text == "b" {
                back();
            }
            if root.screen == Screen.MainPlay {
                if event.text == Key.LeftArrow {
                    root.prev();
                } else if event.text == Key.RightArrow {
                    next(0);
                }
            }
            if root.screen == Screen.ChoicePlay {
                if event.text == Key.LeftArrow {
                    choice_play_s.collect_changed(false, false);
                } else if event.text == Key.RightArrow {
                    choice_play_s.collect_changed(true, false);
                }
            }
            if root.screen == Screen.LookUp {
                if event.text == Key.LeftArrow {
                    if root.last_num > 0 {
                        root.last_num -= 1;
                        look_up_selected(root.last_num);
                    }
                    
                } else if event.text == Key.RightArrow {
                    if root.last_num < search_all_countries.length - 1 {
                        root.last_num += 1;
                        look_up_selected(root.last_num);
                    }
                }
            }
            // accept
            accept
            
        }
    }
    // ***************************************************************** //
    //                            BACK BUTTON
    // ***************************************************************** //
    TouchArea {
        visible: root.screen != Screen.Start;
        x: Sizes.padding;
        y: Sizes.padding;
        width: Sizes.title_height;
        height: Sizes.title_height;
        Image {
            source: @image-url("img/back.svg");
            height: Sizes.title_height;
        }

        clicked => {
            back();
        }
    }
    TouchArea {
        visible: root.screen == Screen.ChoicePlay || 
                 root.screen == Screen.MainPlay;
        x: root.width - Sizes.padding - Sizes.title_height;
        y: Sizes.padding;
        width: Sizes.title_height;
        height: Sizes.title_height;
        Image {
            source: @image-url("img/graph.svg");
            height: Sizes.title_height;
        }

        clicked => {
            get_play_scores(root.screen == Screen.ChoicePlay);
            // play_scores_popup.show();
        }
    }
    // ***************************************************************** //
    //                            Start Screen
    // ***************************************************************** //
    Rectangle {
        visible: root.screen == Screen.Start;
        VerticalLayout {
            padding: Sizes.padding;
            spacing: Sizes.spacing;
            Rectangle {
                // height: Sizes.title_height;
            }
            Image {
                source: @image-url("img/logo.svg");
                height: root.height/4;
            }
            Rectangle {}
            TextButtonWithIcon {
                height: root.height/10;
                text: "Play";
                clicked => {
                    root.screen = Screen.SelectPlay;
                }
            }
            TextButtonWithIcon {
                height: root.height/10;
                text: "Look Up Infos";
                icon: @image-url("img/info.svg");
                clicked => {
                    w_sel_look_up.reset_search();
                    root.screen = Screen.SelectLookUp
                }
            }
            TextButtonWithIcon {
                height: root.height/10;
                text: "Score";
                icon: @image-url("img/score.svg");
                clicked => {
                    w_score.refresh();
                    root.screen = Screen.Score;
                }
            }
            TextButtonWithIcon {
                height: root.height/10;
                text: "Help";
                icon: @image-url("img/help.svg");
                clicked => {
                    root.screen = Screen.Help;
                }
            }
            Rectangle {}
            Rectangle {}
        }
        
    }
    // ***************************************************************** //
    //                            OTHER SCREENS
    // ***************************************************************** //
    w_help := HelpScreen {
        visible: root.screen == Screen.Help;
    }
    w_score := ScoreScreen {
        visible: root.screen == Screen.Score;
        sub_categories_name: root.sub_categories_name;
        users: root.users;
        filter_changed(all) => {score_filter_changed(all)}
        category_changed(idx) => {score_sub_cat_changed(idx)}
        user_selected(name) => {score_user_selected(name);}
        user_change(name, delete) => {score_user_change(name, delete);}
        rename_user(name1, name2) => {score_rename_user(name1, name2);}
        reset_focus() => {root.focus();}
    }

    w_select_play := SelectPlayScreen {
        visible: root.screen == Screen.SelectPlay;
        sub_categories_name: root.sub_categories_name;
        set_play_config(params) => {
            if params.play_type {
                root.screen = Screen.SelectMainPlay
            } else {
                root.screen = Screen.SelectChoicePlay
            }
            set_play_config(params);
        }
    }
    w_sel_look_up := SelectLookUpScreen {
        visible: root.screen == Screen.SelectLookUp;
        all: root.search_all_countries;
        on: root.search_countries_mask;
        search_changed(search) => {
            look_up_search_changed(search)
        }
        selected(num) => {
            root.last_num = num;
            look_up_selected(num) 
        }
    }

    w_look_up := LookUpScreen {
        visible: root.screen == Screen.LookUp;
    }
    
    sel_main_play_s := SelectMainPlayScreen {
        info_type_names: root.all_categories_name;
        guess_type_names: root.txt_categories_name;
        visible: root.screen == Screen.SelectMainPlay;
        play(cat_choices, im_choice, play_mode) => {
            main_play_s.play_mode = 3 -  play_mode;
            start_play(
                cat_choices, 
                im_choice,
            );
            root.screen = Screen.MainPlay;
        }
    }

    main_play_s := MainPlayScreen {
        visible: root.screen == Screen.MainPlay;
        next(score) => {next(score)}
        prev() => {prev()}
        look_up_current() => {look_up_current()}
    }

    sel_choice_play_s := SelectChoicePlayScreen {
        visible: root.screen == Screen.SelectChoicePlay;
        info_types: root.all_categories_name;
        play(info_type, guess_type) => {
            choice_start_play(
                info_type, 
                guess_type
            );
            root.screen = Screen.ChoicePlay;
        }
        
    }
    choice_play_s := ChoicePlayScreen {
        visible: root.screen == Screen.ChoicePlay;
        changed(was_guessed, next, found) => {
            choice_changed(was_guessed, next, found)
        }
        look_up_current() => {look_up_current()}
    }


    // On top of everything current play scores
    play_scores_popup := PopupWindow{
        width: root.width;
        height: root.height;
        Rectangle {
            background: Palette.pop_up_mask;
            VerticalBox {
                padding: Sizes.padding;
                Rectangle {}
                Rectangle {
                    vertical-stretch: 0;
                    background: Palette.background.transparentize(0.1);
                    border-color: Palette.buttons;
                    border-radius: Sizes.std_radius;
                    border-width: Sizes.std_border;
                    VerticalBox {
                        padding: Sizes.padding;
                        padding-bottom: Sizes.padding + 2*Sizes.spacing;
                        spacing: Sizes.spacing + 20px;
                        t_pop := RegularText {
                            style: FontSettings.title-small;
                            horizontal-alignment: center;
                            text: root.screen == Screen.ChoicePlay ?
                                "Number of countries per wrong guesses":
                                "Number of countries per star rating";
                            width: root.width - 4*Sizes.padding;
                            wrap: word-wrap;
                        }
                        BarGraph {
                            bar_height: root.height/7;
                            bar_width: root.screen == Screen.ChoicePlay ? 
                                (t_pop.width - 4*Sizes.spacing - 2*Sizes.padding)/5:
                                (t_pop.width - 5*Sizes.spacing - 2*Sizes.padding)/6;
                            max_num: root.play_score_max;
                            avg: root.play_score_val;
                            last: root.play_score_val;
                            names: root.screen == Screen.ChoicePlay ? 
                                ["Skip", 3, 2, 1, 0]:
                                ["Skip", 1, 2, 3, 4, 5];
                            color_2: Palette.regular_text;
                        }
                    }
                }
                Rectangle {}
            }
        }

    }
}
