import { Button, VerticalBox, HorizontalBox, ComboBox, ScrollView, StandardButton } from "std-widgets.slint";
import { MultiChoice, RegularText, TitleText, ScrollChoice, TextButton, BarGraph } from "widgets.slint";
import { TextStyle, FontSettings, Palette, Sizes } from "styling.slint";
import { ScoreStatSlint, PopupType } from "structs.slint";

export component ScoreScreen inherits Rectangle {
    callback user_selected(name:string);
    callback filter_changed(all:bool);
    callback category_changed(idx:int);
    callback user_change(user: string, delete:bool);
    callback rename_user(original_name: string, new_name: string);
    callback reset_focus();
    in property <[string]> sub_categories_name: ["World", "Africa", "Americas", "Asia", "Europe", "Oceania"];
    in property <[string]> users: ["User 0"];
    in property <ScoreStatSlint> stat: {
        main_avg: [100, 10, 30, 42, 41, 57],
        main_last: [100, 9, 31, 47, 44, 52],
        choice_avg: [100, 20, 25, 35, 170],
        choice_last: [0, 23, 22, 30, 170],
        main_max: 100,
        choice_max: 170,
    };
    property <PopupType> popup_type: PopupType.Off;
    
    public function set_active_user(name: string) {
        user_sel.current-value = name;
        timer.running = true;
    }
    public function refresh() {
        timer.running = true;
    }

    function close_popup() {
        popup_type = PopupType.Off;
        reset_focus();
    }
    timer := Timer {
        interval: 10ms;
        running: false;
        triggered() => {
            self.running = false;
            filter_changed(w_hard.not_default);
            category_changed(sub_cat_choice.choice_num);
        }
    }
    VerticalLayout {
        padding: Sizes.padding;
        spacing: Sizes.spacing;
        TitleText{
            text: "Score";
        }
        HorizontalBox {
            padding: 0;
            spacing: Sizes.spacing/2;
            Rectangle {}
            TitleText {
                text: "User:";
                style: FontSettings.title-small;
            }
            user_sel := ComboBox {
                height: Sizes.title_height;
                model: root.users;
                current-value: root.users[0];
                selected(current-value) => {
                    user_selected(current-value);
                    filter_changed(w_hard.not_default);
                    category_changed(sub_cat_choice.choice_num);
                }
            }
            TouchArea {
                width: Sizes.title_height;
                height: Sizes.title_height;
                TitleText {
                    text:"+";
                    style:  { font-size: 20pt, font-weight: 1000 };
                }


                clicked => {
                    popup_type = PopupType.Add;
                    txt_input.text = "";
                    txt_input.focus();
                }
                
            }
            TitleText {
                text:"/";
            }
            TouchArea {
                width: Sizes.title_height;
                height: Sizes.title_height;
                TitleText {
                    text:"E";
                    style:  { font-size: 20pt, font-weight: 1000 };
                }
                clicked => {
                    popup_type = PopupType.Edit;
                    txt_input.text = user_sel.current-value;
                    txt_input.select-all();
                    txt_input.clear-selection();
                    txt_input.focus();
                }
            }
            TitleText {
                text:"/";
            }
            TouchArea {
                width: Sizes.title_height;
                height: Sizes.title_height;
                TitleText {
                    text:"-";
                    style:  { font-size: 20pt, font-weight: 1000 };
                }


                clicked => {
                    popup_type = PopupType.Delete;
                }
            }

            Rectangle {}
        }

        scroll := ScrollView {
            vertical-scrollbar-policy: always-off;

            VerticalBox {
                width: scroll.width - Sizes.size_bar;
                spacing: Sizes.spacing;
                padding: 0;
                padding-left: Sizes.size_bar;

                Rectangle {
                    background: Palette.highlight3;
                    border-radius: Sizes.std_radius;
                    VerticalBox {
                        padding: Sizes.spacing;
                        spacing: Sizes.spacing;
                        w_hard := MultiChoice {
                            choices: ["UN members only", "All territories"];
                            changed not_default => {
                                filter_changed(self.not_default);
                                category_changed(sub_cat_choice.choice_num);
                            }
                        }
                        RegularText {
                            text: w_hard.not_default?  "Score for all territories (250 different)" : "Score for only United Nation Members (194 different)" ;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            width: 100%;
                            wrap: word-wrap;
                            style: FontSettings.body-small;
                        }
                    }
                }
                TitleText {
                    text: "Region";
                    style: FontSettings.title-small;
                }
                sub_cat_choice := ScrollChoice {
                    width: 100%;
                    choices: root.sub_categories_name;
                    changed choice_num => {category_changed(self.choice_num)}
                }
                HorizontalBox {
                    Rectangle {}

                    Rectangle {
                        width: (root.width - 5*Sizes.spacing - 4*Sizes.padding)/12;
                        Rectangle {
                            width: 100%;
                            height: Sizes.spacing;
                            background: Palette.regular_text;
                        }
                    }
                    RegularText {
                        text: "Average";
                        vertical-alignment: center;
                    }
                    Rectangle {}

                    Rectangle {
                        width: (root.width - 5*Sizes.spacing - 4*Sizes.padding)/12;
                        Rectangle {
                            width: 100%;
                            height: Sizes.spacing;
                            background: Palette.correct;
                        }
                    }
                    RegularText {
                        text: "Last play";
                        vertical-alignment: center;
                    }
                    Rectangle {}
                }
                TitleText {
                    text: "Free play score";
                    style: FontSettings.title-small;
                }
                BarGraph {
                    bar_height: root.height/7;
                    bar_width: (root.width - 5*Sizes.spacing - 4*Sizes.padding)/6;
                    max_num: root.stat.main_max;
                    names: ["Not Played", 1, 2, 3, 4, 5];
                    avg: root.stat.main_avg;
                    last: root.stat.main_last;
                }
                RegularText {
                    height: 50px;
                    text: "Number of countries per star rating";
                    horizontal-alignment: center;
                    vertical-alignment: bottom;
                }
                Rectangle {}
                TitleText {
                    text: "4 Choices score";
                    style: FontSettings.title-small;
                }
                BarGraph {
                    bar_height: root.height/7;
                    bar_width: (root.width - 4*Sizes.spacing - 4*Sizes.padding)/5;
                    max_num: root.stat.choice_max;
                    names: ["Not Played", 3, 2, 1, 0];
                    avg: root.stat.choice_avg;
                    last: root.stat.choice_last;
                }
                RegularText {
                    height: 50px;
                    text: "Number of countries per wrong guesses";
                    horizontal-alignment: center;
                    vertical-alignment: bottom;
                }
                Rectangle {}
            }
        }
    }

    // POPUP
    TouchArea {
        visible: popup_type != PopupType.Off;
        height: 100%;
        width: 100%;
        clicked => {close_popup()}
        Rectangle {
            height: 100%;
            width: 100%;
            background: black.transparentize(0.5);
            VerticalLayout {
                padding: 0;
                spacing: 0;
                Rectangle {height: root.height/8;}
                HorizontalLayout {
                    padding-left: root.width/8;
                    padding-right: root.width/8;
                    Rectangle {
                        background: Palette.background;
                        border-radius: 10px;
                        border-color: Palette.buttons;
                        border-width: 2px;
                        VerticalBox {
                            spacing: Sizes.spacing;
                            RegularText {
                                text: popup_type == PopupType.Delete ? "Delete \{user_sel.current-value} ?":
                                popup_type == PopupType.Add ? "Create new user":
                                    "Modify \{user_sel.current-value}";
                                horizontal-alignment: center;
                            }
                            txt_input := TextInput {
                                visible: popup_type == PopupType.Edit || popup_type == PopupType.Add;
                                horizontal-alignment: center;
                                font-size: FontSettings.body-large.font-size;
                                wrap: word-wrap;
                                key-pressed(KeyEvent) => {
                                    // Quick and dirty character limitations (only latin & numbers)
                                    if KeyEvent.text <= "Z" && KeyEvent.text >= "A"  {
                                        reject
                                    } else if KeyEvent.text <= "z" && KeyEvent.text >= "a" {
                                        reject
                                    } else if KeyEvent.text == Key.Delete || KeyEvent.text == Key.Backspace || KeyEvent.text == Key.Space {
                                        reject
                                    } else if KeyEvent.text <= "9" && KeyEvent.text >= "0"{
                                        reject
                                    } else if KeyEvent.text == Key.LeftArrow || KeyEvent.text == Key.RightArrow{
                                        reject
                                    } else {
                                        accept
                                    }
                                }
                            }
                            HorizontalBox {
                                padding: 0;
                                spacing: Sizes.spacing;
                                alignment: center;
                                Rectangle {}
                                TextButton {
                                    width: root.width/4;
                                    height: Sizes.height_look_up;
                                    text:"Cancel";
                                    clicked => {
                                        close_popup()
                                    }
                                }
                                TextButton {
                                    width: root.width/4;
                                    height: Sizes.height_look_up;
                                    text:"Ok";
                                    clicked => {
                                        if root.popup_type == PopupType.Add {
                                            user_change(txt_input.text, false);
                                        } else if root.popup_type == PopupType.Delete {
                                            user_change(user_sel.current_value, true);
                                        } else if root.popup_type == PopupType.Edit {
                                            rename_user(user_sel.current_value, txt_input.text);
                                        }
                                            close_popup()
                                    }
                                }
                                Rectangle {}
                            }
                        }
                    }
                }
                Rectangle {}
            }
        }
    }
}
