import { Button, VerticalBox, HorizontalBox, TextEdit, CheckBox, ComboBox, ScrollView } from "std-widgets.slint";
import { CatInfo, ChoiceState, TxtOrImg} from "structs.slint";
import { TextStyle, FontSettings, Palette, Sizes } from "styling.slint";

export component RegularText inherits Text {
    in property <TextStyle> style: FontSettings.body-large;
    font-size: style.font-size;
    font-weight: style.font-weight;
}
export component TitleText inherits RegularText {
    style: FontSettings.title-large;
    height : Sizes.title_height;
    horizontal-alignment: center;
    vertical-alignment: center;
}

export component ChoiceElem inherits TouchArea {
    in property <string> text;
    in property <ChoiceState> state : ChoiceState.NotClicked;
    in property <color> background_elem: 
        root.state == ChoiceState.NotClicked?  Palette.highlight3:
        root.state == ChoiceState.Correct?  Palette.correct:
        Palette.wrong;
    in property <length> radius: Sizes.std_radius;
    public function click() {
        root.clicked();
    } 
    Rectangle {
        width: 100%;
        border-radius: radius;
        background: root.background_elem;
    }
    RegularText {
        width:100%;
        horizontal-alignment: center;
        vertical-alignment: center;
        wrap: word-wrap;
        text: root.text;
    }
}
export component MultiChoice {
    in property <[string]> choices;
    in-out property <int> choice_num : 0;
    out property <bool> not_default : root.choice_num != 0;

    in property <length> height_elem : Sizes.height_multi_choice;
    in property <length> spacing : 2*Sizes.spacing;
    in property <length> side_padding : Sizes.spacing;
    in property <length> width_per_elem: (root.width - 2*root.side_padding -(choices.length - 1)*root.spacing)/choices.length;
  
    HorizontalBox {
        padding: 0;
        spacing: root.spacing;
        alignment: center;
        for text[index] in root.choices : ChoiceElem {
            background_elem: Palette.highlight1;
            text: text;
            width: root.width_per_elem;
            height: root.height_elem;
            clicked => {root.choice_num = index}
        }
    }
    highlight := Rectangle{
        x: (root.width - root.width_per_elem*root.choices.length - root.spacing*(root.choices.length - 1))/2 + (root.width_per_elem+root.spacing)*root.choice_num;
        background: Palette.highlight2;//Palette.highlight3;
        height: root.height_elem;
        width:root.width_per_elem;
        border-radius: Sizes.std_radius;
        animate x {
            duration: 300ms;
            easing: ease-in-out;
        }
    }
}


component ToggleStar inherits TouchArea {
    in property <bool> on: false;
    in property <bool> semi: true;
    height: Sizes.title_height;
    width: Sizes.title_height;
    im := Image {
        height: Sizes.title_height;
        width: Sizes.title_height;
        source: @image-url("img/star.svg");
        colorize: on? Palette.gold:
            root.semi? @radial-gradient(circle, white 0%, Palette.gold 100%):
            white;
    }
}

export component FiveStarScore {
    in property <bool> user_modifiable : true;
    in-out property <int> score:0;
    in-out property <int> prev_score:2;
    callback score_changed(score: int);
    VerticalBox {
        padding: 0;
        HorizontalBox {
            spacing: Sizes.spacing;
            padding: 0;
            for i in [0, 1, 2, 3, 4] : ToggleStar {
                clicked => {
                    if !user_modifiable {
                        return;
                    }
                    root.score = i+1;
                    root.prev_score = i+1;
                    score_changed(i+1);
                }
                on: root.score>i;
                semi: root.prev_score>i;
            }
        }
    }
}


export component HiddenText inherits TouchArea {
    in-out property <string> name;
    in-out property <string> first_letter;
    in-out property <string> type;
    in-out property <bool> show;
    in-out property <bool> show_first_letter;
    in-out property <length> size_hint: Sizes.size_hint;
    in property <int> play_mode; 
    callback hint();
    
    public function update_cat(cat: CatInfo, seen: bool) {
        self.type = cat.category;
        self.name = cat.full;
        self.first_letter = cat.first;
        if root.play_mode == 3 || seen {
            root.show = true;
        } else {
            root.show = false;
        }
        
        
        if root.play_mode == 1 && cat.with_hint && !root.show { 
            self.size_hint = Sizes.size_hint;
        }
        else {
            self.size_hint = 0;
        }

        if root.play_mode == 2 && cat.with_hint {
            self.show_first_letter = true;
        }
        else {
            self.show_first_letter = false;
        }

    }
    
    clicked => {
        root.show = true;
        root.show_first_letter = false;
        self.size_hint = 0;
    }

    VerticalBox {
        padding: 0;
        Rectangle {
            background: Palette.buttons;
            border-radius: Sizes.std_radius;
            preferred-height: Sizes.height_hidden_text;
            HorizontalLayout {
                padding: Sizes.spacing;
                spacing: Sizes.spacing;
                w_type := RegularText {
                    horizontal-alignment: right;
                    vertical-alignment: center;
                    text: "\{root.type}:";
                }
                RegularText { 
                    horizontal-stretch: 1;
                    vertical-stretch: 1;
                    height: 100%;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                    text: show ? root.name: root.first_letter;
                    visible: root.show || root.show_first_letter;
                    wrap: word-wrap;
                }
            }   
        }
    }
    
    TouchArea {
        x : root.width - root.size_hint - Sizes.spacing;
        height: root.size_hint;
        width: root.size_hint;
        clicked => {
            hint();
            root.size_hint = 0;
            root.show_first_letter = true
        }
    }
    Image {
        x : root.size_hint == 0 ? root.width - Sizes.size_hint/2 - Sizes.spacing : root.width - Sizes.size_hint - Sizes.spacing;
        height: root.size_hint;
        width: root.size_hint;
        source: @image-url("img/hint.svg");
        animate height, width, x {
            duration: 250ms;
        }
    }
}

export component ScrollChoice inherits HorizontalLayout {
    in property <[string]> choices: ["Country", "Capital", "Languages", "Borders", "Region", "Currencies"];
    in property <length> width_per_elem: (root.width - root.spacing_i *2 - 2*Sizes.size_bar - 2*root.width_arrow)/3;
    in-out property <int> choice_num:0;

    in property <length> spacing_i: 2*Sizes.spacing;
    in property <length> width_arrow: Sizes.width_arrow;
    in property <length> height_elem: Sizes.height_multi_choice;
    property <length> Width_w_spacing : root.spacing_i + root.width_per_elem;

    public function set_choice_num(i:int) {
        root.choice_num = i;
        scroll.viewport-x= set_x();
    }
    function set_x() -> length {
        return - (root.choice_num* (root.width_per_elem+ root.spacing_i));
    }
    alignment: center;
    padding: 0;
    spacing: 0;
    TouchArea {
        height: root.height_elem;
        width: root.width_arrow;

        Image {
            height: 100%;
            width: 100%;
            source: @image-url("img/arrow_left.svg");
            colorize: root.choice_num == 0 ? white.transparentize(0.5) : white;
        }
        clicked => {
            
            if root.choice_num > 0 {set_choice_num(root.choice_num -1)}
        }
    }

    Rectangle {
        width: Sizes.size_bar;
    }
    scroll := ScrollView {

        height: root.height_elem + Sizes.size_bar;
        viewport-height: root.height_elem;
        horizontal-scrollbar-policy: always-off;
        width: 3*width_per_elem+ 2*root.spacing_i + Sizes.size_bar;
        viewport-x: set_x();
        
        HorizontalLayout {
            padding: 0;
            spacing: root.spacing_i;
            Rectangle {width: root.width_per_elem;}
            for text[index] in root.choices : ChoiceElem {
                height: root.choice_num == index ? root.height_elem: root.height_elem - 5pt;
                text: text;
                width: root.width_per_elem;
                background_elem: index == root.choice_num ? Palette.highlight4 : Palette.highlight3;
                clicked => {root.choice_num = index; scroll.viewport-x= set_x();}
                animate height {
                    duration: 50ms;
                    easing: ease-in;
                     
                }
            }
            Rectangle {width: width_per_elem;}
        }

        scrolled() => {
            if scroll.viewport-x >= set_x() + root.spacing_i + root.width_per_elem/2 {
                root.choice_num -= 1;
            } 
            else if scroll.viewport-x <= set_x() - root.spacing_i - root.width_per_elem/2 {
                root.choice_num += 1;
            }
        }
        animate viewport-x {
            duration: 300ms;
            easing: ease-in-out;
        }
    }
    TouchArea {
        height: root.height_elem;
        width: root.width_arrow;

        Image {
            height: 100%;
            width: 100%;
            source: @image-url("img/arrow_left.svg");
            rotation-angle: -180deg;
            colorize: root.choice_num == choices.length - 1 ? white.transparentize(0.5): white;
        }
        clicked => {
            if root.choice_num < (choices.length - 1) {set_choice_num(root.choice_num + 1)}
        }
    }
}

export component SwipeInfo inherits SwipeGestureHandler {
    callback prev();
    callback next();
    in property <TxtOrImg> info;
    swiped => {
        if self.current-position.x > self.pressed-position.x + self.width / 4 {
            prev();
        } else if self.current-position.x < self.pressed-position.x - self.width / 4 {
            next();
        }
    }

    Rectangle {
        Image {
            height: 100%;
            visible: !root.info.is-txt;
            width: 100%;
            source: root.info.img;
            image-fit: contain;
        }

        TitleText {
            height: 100%;
            width: 100%;
            visible: root.info.is-txt;
            text: root.info.txt;
        }
    }
}


export component ImageChoice inherits TouchArea {
    in property <image> image;
    in property <ChoiceState> state : ChoiceState.NotClicked;
    in property <color> background_elem: 
        root.state == ChoiceState.NotClicked?  Palette.highlight1:
        root.state == ChoiceState.Correct?  Palette.correct:
        Palette.wrong;
    in property <length> radius: Sizes.std_radius;
   
    Rectangle {
        // border-width: 3px;
        // border-color: Palette.buttons;
        border-radius: root.radius;
        background: root.background_elem;
    }
    HorizontalBox {
        padding: 0;
        // padding: Sizes.padding;
        Image {
            source: root.image;
            image-fit: contain;
        }
    }
}

export component TextButton inherits HorizontalBox {
    callback clicked();
    in property <length> border_radius : Sizes.button_radius;
    in property <string> text : "Button";
    in property <length> width_button : root.width;
    in property <length> height_button: root.height;
    padding: 0;
    spacing: 0;
    Rectangle {}
    TouchArea {
        height: root.height_button;
        width: root.width_button;
        Rectangle {
            background: Palette.buttons;
            border-radius: root.border_radius;
        }
        RegularText {
            text: root.text;
            horizontal-alignment: center;
            vertical-alignment: center;
            wrap: word-wrap;
            width : 100%;
            height : 100%;
        }
        clicked() => {root.clicked()}
    }
    Rectangle {}
}

export component BarGraph {
    in property <color> color_1: Palette.regular_text;
    in property <color> color_2: Palette.correct;
    in property <length> bar_width: 80px;
    property <length> half_bar_width: bar_width/2;
    in property <length> bar_height: 200px;
    in property <int> max_num: 100;
    in property <[string]> names: [0, 1, 2, 3, 4, 5];
    in property <[int]> avg: [100, 10, 30, 42, 41, 57];
    in property <[int]> last: [100, 9, 31, 47, 44, 52];
    height: root.bar_height;
    Rectangle {
        width: root.bar_width*root.names.length + Sizes.spacing*(root.names.length - 1);
        height: root.bar_height;
        for val[i] in root.names : Rectangle {
            width: root.bar_width;
            height: 100%;
            x: i*(bar_width+Sizes.spacing);
            y: 0;
            TitleText {
                vertical-alignment: top;
                text:val;
                width: 100%;
                y: root.bar_height;
                style: FontSettings.body-large;
            }
            Rectangle {
                x : 0;
                y: root.bar_height - root.avg[i]/root.max_num*root.bar_height;
                height:  root.avg[i]/root.max_num*root.bar_height;
                width: root.half_bar_width;
                background: root.color_1;
            }
            RegularText {
                x: 0;
                y: root.bar_height - root.avg[i]/root.max_num*root.bar_height  - 20px;
                width: root.half_bar_width;
                horizontal-alignment: center;
                text:root.avg[i];
                visible: root.last[i] != root.avg[i];
                style: FontSettings.body-small;
            }
            Rectangle {
                x : root.half_bar_width;
                y: root.bar_height - root.last[i]/root.max_num*root.bar_height;
                height:  root.last[i]/root.max_num*root.bar_height;
                width: root.half_bar_width;
                background: root.color_2;
            }
            RegularText {
                x : root.half_bar_width;
                y: root.bar_height - root.last[i]/root.max_num*root.bar_height  - 20px;
                width: root.half_bar_width;
                horizontal-alignment: center;
                text:root.last[i];
                visible: root.last[i] != root.avg[i];
                style: FontSettings.body-small;
            }
            RegularText {
                x : 0;
                y: root.bar_height - root.last[i]/root.max_num*root.bar_height  - 20px;
                width: root.bar_width;
                horizontal-alignment: center;
                text:root.last[i];
                visible: root.last[i] == root.avg[i] && root.last[i]!=0;
                style: FontSettings.body-small;
            }
        }

    }
}

export global HyperLinkClick {
    pure callback hl-clicked(string);
}

export component HyperLink inherits RegularText {
    callback link(url:string);
    in property<string> link_text;
    in property<string> url;
    in property<color> link_color:Palette.link_color;
    in property<color> hvr-color:Palette.regular_text;

    text: root.link_text;

    hl-ta := TouchArea {
        clicked => { HyperLinkClick.hl-clicked(root.url)}
    }
    

    states [
        has-hvr when hl-ta.has-hover: {
            color: root.hvr-color;
        }
        not-hvr when !hl-ta.has-hover: {
            color: root.link-color;
        }
    ]

}



